name: Reusable AI Code Review

on:
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        description: 'OpenAI API key for code review'
        required: true

jobs:
  review:
    runs-on: ubuntu-latest
    outputs:
      merge_decision: ${{ steps.ai_review.outputs.merge_decision }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai PyGithub tiktoken
          if [ "${{ inputs.custom-requirements }}" != "" ]; then
            pip install ${{ inputs.custom-requirements }}
          fi

      - name: Extract PR Number
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Run AI Code Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        id: ai_review
        run: |
          python .github/scripts/ai_code_review.py > output.log
          cat output.log
          echo "merge_decision=$(grep MERGE_DECISION output.log | cut -d'=' -f2)" >> $GITHUB_OUTPUT

      - name: Set PR status
        uses: actions/github-script@v6
        env:
          MERGE_DECISION: ${{ steps.ai_review.outputs.merge_decision }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mergeDecision = process.env.MERGE_DECISION.trim().toLowerCase();
            console.log(`Merge decision: ${mergeDecision}`);

            let state, description;
            if (mergeDecision === 'success') {
              state = 'success';
              description = 'AI review passed';
            } else {
              state = 'failure';
              description = 'AI review failed';
            }

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'AI Code Review'
            });

            console.log(`Set PR status to: ${state}`);

      - name: Comment PR on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'AI Code Review failed. Please check the workflow logs for details.'
            })